HERMANN KOJO KWARTENG AMOAKO (4556037)

THE PROBLEM:

Issues of delayed and or cancelled flights schedules has been a major problem in the aviation industry for long. Not only do air passengers have to bear with the disappointment of missing out on their favourite destination but also brings revenue loss to the airline companies and creates inconvenience at the said airports due to the strict scheduling of flights. The essence of this machine learning project is to train a machine to predict with high level of accuracy whether flight to a destination will be delayed or not given certain features. I would try to implement a solution to this problem using the binary classification method to work.



DECSRIPTION DATA
The dataset is being retrieved from the United States Department of Transportation (Bureau of Transportation Statistics) and used solely for the purpose of this project. The data repository has information on all local flights within the USA. The data will be preprocessed and certain features reduced for the project. Features that I deem as unneccesary or need to be encoded for the purpose of this project work will be effectively dealt with in the preprocessing stage.

Data Source:
https://www.transtats.bts.gov/DL_SelectFields.asp?Table_ID=236&DB_Short_Name=On-Time


Week 1
1. Doing a little more research about classification/logistic regression to solve the problem.
2. Get Data
3. Preprocess Data and transformations.
4. Do some data exploration and visualizations


Week 2
1. Choosing Features which will be informative, discriminating and independent features is a crucial step for effective algorithms in classification and regression.
2. Build a model using specified learning algorithm


Week 3
Score and evaluate the model
Predict over new data
Presentation


REFERENCES
1. https://www.datasciencecentral.com/profiles/blogs/predicting-flights-delay-using-supervised-learning

2. http://cs229.stanford.edu/proj2012/BandyopadhyayGuerrero-PredictingFlightDelays.pdf


# -*- coding: utf-8 -*-
"""
Created on Wed Jan 10 09:57:35 2018

@author: hkkam
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

#IMPORT THE DATASET
df = pd.read_csv('C:/Users/hkkam/Desktop/MLProject/air.csv')

#Visualize to check the correlation between the features
sns.heatmap(df.corr())

df1 = df.loc[(df['ORIGIN_CITY_NAME'] == 'Atlanta, GA') | (df['ORIGIN_CITY_NAME'] == 'Chicago, IL') | (df['ORIGIN_CITY_NAME'] == 'New York, NY') | (df['ORIGIN_CITY_NAME'] == 'Los Angeles, CA') | (df['ORIGIN_CITY_NAME'] == 'Dallas, TX') ]
#df1 = df1.reset_index(drop=True)

dfs = df1.loc[(df1['UNIQUE_CARRIER'] == 'AS') | (df1['UNIQUE_CARRIER'] == 'DL') | (df1['UNIQUE_CARRIER'] == 'VX') | (df1['UNIQUE_CARRIER'] == 'B6') | (df1['UNIQUE_CARRIER'] == 'HA') | (df1['UNIQUE_CARRIER'] == 'WN') | (df1['UNIQUE_CARRIER'] == 'OO') | (df1['UNIQUE_CARRIER'] == 'UA') | (df1['UNIQUE_CARRIER'] == 'AA') | (df1['UNIQUE_CARRIER'] == 'EV')]
#dfs = dfs.reset_index(drop=True)

dfx = dfs.loc[(dfs['DEST_CITY_NAME'] == 'Atlanta, GA') | (dfs['DEST_CITY_NAME'] == 'Chicago, IL') | (dfs['DEST_CITY_NAME'] == 'New York, NY') | (dfs['DEST_CITY_NAME'] == 'Los Angeles, CA') | (dfs['DEST_CITY_NAME'] == 'Dallas, TX') ]
dfx = dfx.reset_index(drop=True)


#Extract rows where flight was not cancelled. i.e CANCELLED == 0
dfx= dfx[dfx["CANCELLED"] == 0] #Create a data frame for the successful flights
dfx = dfx.reset_index(drop=True)

#early arrival = 0 and late =1
dfx['ARR_DELAY'] = dfx['ARR_DELAY'] = [0 if x < 0 else 1 for x in dfx['ARR_DELAY']]
#EXTRACT SOME 11 important FEATURES To WORK WITH
#==============================================================================
# print(list(fdf.columns))
# ['DAY_OF_WEEK', 'UNIQUE_CARRIER', 'ORIGIN', 'DEST', 'CRS_DEP_TIME', 'DEP_TIME', 'DEP_DELAY', 'DISTANCE', 'ARR_DELAY']
#==============================================================================
fdf = dfx.iloc[:, [2,3,9,13,15,17,22,20]]
print(fdf.shape)
sns.heatmap(fdf.corr())
#(12906, 8)

#wHAT NEXT??
# Separate predictors from outcome
x =  fdf.iloc[:, [0,1,2,3,4,5,6,]].values
y = fdf.iloc[:,7].values
            
# ... and encode all categorical variables OF the training data
from sklearn.preprocessing import LabelEncoder , OneHotEncoder
labelencoder_x = LabelEncoder()
x[:, 0] = labelencoder_x.fit_transform(x[:,0])
x[:, 1] = labelencoder_x.fit_transform(x[:,1])
x[:, 2] = labelencoder_x.fit_transform(x[:,2])
x[:, 3] = labelencoder_x.fit_transform(x[:,3])
onehotencoder = OneHotEncoder(categorical_features = [0,1,2,3])
x = onehotencoder.fit_transform(x).toarray()

#Feature Scaling the training dataset ::: Standardization
from sklearn.preprocessing import StandardScaler 
scaler = StandardScaler().fit(x)
rescaled_x = scaler.transform(x)

#SPLIT THE DATASET INTO TRAINING AND TEST SET MADE UP OF 0.2OF THE ORIGINAL DATA
from sklearn.cross_validation import train_test_split
x_train,x_test,y_train,y_test = train_test_split(rescaled_x,y, test_size=0.2, random_state=0)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0)
classifier.fit(x_train, y_train)

#predicting the test result
y_pred = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print(conf_matrix)



